from app.rss_parser import fetch_articles, reed_rss
from app.news_generator import generate_news
from app import loop
from app.telegram_bot import send_telegram


# –ì–æ–ª–æ–≤–Ω–∞ –∑–∞–¥–∞—á–∞
async def job():
    """–û–¥–∏–Ω —Ü–∏–∫–ª –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω."""
    RSS_FEEDS = reed_rss()
    fetched_article = fetch_articles(RSS_FEEDS)

    # –Ø–∫—â–æ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    if fetched_article is None:
        print("üëâ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É —Å–∫–µ–¥—É–ª–µ—Ä–∞.")
        return

    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏
        news_text = generate_news(fetched_article)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram
        await send_telegram(news_text)
        print("üì® –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É Telegram.")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω–∏: {e}")


# async def job():
    # feed = reed_rss()
    # fetched_article = fetch_articles(feed)
    # if fetched_article is None:
    #     print("–ó–∞–ø—É—Å–∫ –≤—ñ–¥–∫–ª–∞–¥–∞—î—Ç—Å—å—è")
    #     return
    # news_text = generate_news(fetched_article)
    # await send_all(news_text)